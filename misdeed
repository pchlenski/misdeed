#!/usr/bin/env python3
"""
MiSDEED command line interface.
"""

import argparse
import logging
import os
import os.path
import sys
from uuid import uuid4
import numpy as np
import matplotlib.pyplot as plt

from src import __version__
from src.OmicsGenerator import OmicsGenerator
from src.visualization import plot_timecourse
from src.visualization import plot_pca

class MisdeedOptions:
    """
    DOCSTRING
    """
    def __init__(self):
        parser = argparse.ArgumentParser(
            description=f"MiSDEED (v{__version__}): microbiome synthetic data engine for experimental design",
            usage = "misdeed [-h] node_sizes [-hioNtDCPVRnevrTdcIEpa] [--options]",
        )

        # Generator params
        parser.add_argument(
            "node_sizes",
            help="Number of dimensions for each node, separated by commas"
        )
        parser.add_argument(
            "-i", "--input_dir",
            default=None,
            metavar="",
            help="""Path to a directory containing GLV parameters. Directory should have the following naming
            conventions:
            directory/[node_name]->[node_name].csv (interaction matrix), 
            directory/[node_name]_g.csv (growth rates)
            directory/[node_name]_x0.csv (initial abundances). 
            Mutually exclusive with --connectivity, --self_penalty, --variance, and --correlation."""
        )
        parser.add_argument(
            "-o", "--output_dir",
            default="./output",
            metavar="",
            help="Directory in which to store synthetic data. Default: ./output."
        )
        parser.add_argument(
            "-N", "--node_names",
            default=None,
            metavar="",
            help="Names for each node, separated by commas. If set, must match node_sizes in length. Default: None (n0, n1, n2...)"
        )
        parser.add_argument(
            "-t", "--time_points",
            type=int,
            default=100,
            metavar="",
            help="Number of time points to generate. Default: 100"
        )

        # Random matrix params
        parser.add_argument(
            "-D", "--discard_first",
            type=int,
            default=0,
            metavar="",
            help="Number of time points to generate and discard at initialization. Default: 0"
        )
        parser.add_argument(
            "-C", "--connectivity",
            type=float,
            default=0.5,
            metavar="",
            help="Connectivity (1-sparsity) for generating interaction matrix. Not used if --input_dir is set. Default: 0.5"
        )
        parser.add_argument(
            "-P", "--self_penalty",
            type=float,
            default=None,
            metavar="",
            help="Self-penalty for generating interaction matrix. Not used if --input_dir is set. Default: None (inferred from C, d, sigma)"
        )
        parser.add_argument(
            "-V", "--variance",
            type=float,
            default=1,
            metavar="",
            help="""Variance for multivariate normal distribution for generating interaction matrix. Not used if
            --input_dir is set. Default: 1"""
        )
        parser.add_argument(
            "-R", "--correlation",
            type=float,
            default=-0.4,
            metavar="",
            help="""Correlation (rho) for multivariate normal distribution for generating interaction matrix. Not used
            if --input_dir is set. Default: -0.4"""
        )

        # Simulation params
        parser.add_argument(
            "-n", "--n_samples",
            type=int,
            default=1,
            metavar="",
            help="Number of samples to generate. Default: 1"
        )
        parser.add_argument(
            "-e", "--extinct_fraction",
            type=float,
            default=0,
            metavar="",
            help="Fraction of clades to set to zero when generating samples. Default: 0"
        )
        parser.add_argument(
            "-v", "--noise_variance",
            type=float,
            default=1e-2,
            metavar="",
            help="Variance of biological noise added to system. Default: .01"
        )
        parser.add_argument(
            "-r", "--n_reads",
            type=int,
            default=1e5,
            metavar="",
            help="Number of reads drawn per sample. Default: 10,000"
        )
        parser.add_argument(
            "-T", "--time_step",
            type=float,
            default=1e-2,
            metavar="",
            help="Size of time increment between samples. Default: .01"
        )
        parser.add_argument(
            "-d", "--downsample",
            type=int,
            default=1,
            metavar="",
            help="Downsampling coefficient (keep every d-th sample). Default: 1 (no downsampling)"
        )

        # Case-control params
        parser.add_argument(
            "-c", "--case_fraction",
            type=float,
            default=0,
            metavar="",
            help="Fraction of samples to generate as cases. Default: 0 (no cases)"
        )
        parser.add_argument(
            "-I", "--intervention_node",
            type=str,
            default=None,
            metavar="",
            help="Node to which case intervention is applied. Default: first node"
        )
        parser.add_argument(
            "-E", "--effect_size",
            type=float,
            default=0.1,
            metavar="",
            help="Effect size of case intervention. Default: 0.1"
        )

        # Plotting params
        parser.add_argument(
            "-p", "--plot",
            action="store_true",
            help="Save plots of timecourses in output directory. Default: False"
        )
        parser.add_argument(
            "-a", "--pca",
            action="store_true",
            help="Save PCA plot of all timecourses in output directory. Default: False"
        )

        # Check positional arguments are in place
        if len(sys.argv[1:]) < 2:
            parser.print_help()
            sys.exit(2)

        # Process args
        args = parser.parse_args(sys.argv[1:])

        node_sizes = [int(x) for x in args.node_sizes.split(",")]

        if args.node_names is None:
            node_names = None
        else:
            node_names = args.node_names.split(",")

        # Set up generator
        print("==========================SETUP========================")
        print()

        # Set automatic GLV parameters
        if args.input_dir is None:
            gen = OmicsGenerator(
                node_names=node_names,
                node_sizes=node_sizes,
                time_points=args.time_points,
                discard_first=args.discard_first,
                C=args.connectivity,
                d=args.self_penalty,
                sigma=args.variance,
                rho=args.correlation,
                init_full=True
            )

        # Read GLV parameters from files
        else:
            gen = OmicsGenerator(
                node_names=node_names,
                node_sizes=node_sizes,
                time_points=args.time_points,
                discard_first=args.discard_first
            )
            U = {} # intervention u vectors
            B = {} # intervention b vectors
            intervention_nodes = {} # which nodes are affected
            for filename in os.listdir(args.input_dir):

                if not filename.endswith(".tsv") and not filename.endswith(".csv"):
                    pass # Ignore all non-csv files

                elif filename.find("->") != -1:
                    matrix = np.loadtxt(f"{args.input_dir}/{filename}")
                    matrix_name = filename.split(".tsv")[0]
                    out_name, in_name = matrix_name.split("->")
                    print(f"Setting matrix '{matrix_name}' from {filename}...")
                    gen.add_interaction(
                        name=matrix_name,
                        outbound_node_name=out_name,
                        inbound_node_name=in_name,
                        matrix=matrix
                    )

                elif filename.endswith("_g.tsv"):
                    g = np.loadtxt(f"{args.input_dir}/{filename}")
                    node_name = filename.split("_g.tsv")[0]
                    print(f"Setting growth rates for node '{node_name}' from {filename}...")
                    gen.set_initial_value(node_name, g, growth_rate=True)

                elif filename.endswith("_x0.tsv"):
                    x0 = np.loadtxt(f"{args.input_dir}/{filename}")
                    node_name = filename.split("_x0.tsv")[0]
                    print(f"Setting initial abundances for node '{node_name}' from {filename}...")
                    gen.set_initial_value(node_name, x0)

                elif filename.endswith("_u.tsv"):
                    u = np.loadtxt(f"{args.input_dir}/{filename}")
                    temp_name = filename.split("_u.tsv")[0]
                    intervention_name, node_name = temp_name.split("_")
                    U[intervention_name] = u
                    intervention_nodes[intervention_name] = node_name

                elif filename.endswith("_b.tsv"):
                    b = np.loadtxt(f"{args.input_dir}/{filename}")
                    temp_name = filename.split("_b.tsv")[0]
                    intervention_name, node_name = temp_name.split("_")
                    B[intervention_name] = b
                    intervention_nodes[intervention_name] = node_name # may be redundant with above

                else:
                    print(f"Skipping over {filename}")

            # process interventions:
            if U.keys() != B.keys():
                print("U:", U.keys())
                print("B:", B.keys())
                raise Exception("U and B vectors are not the same. Check that _b.tsv and _u.tsv are paired.")

            for intervention_name in U:
                gen.add_intervention(
                    name=intervention_name,
                    node_name=intervention_nodes[intervention_name],
                    vector=B[intervention_name],
                    U=U[intervention_name]
                )

        print(gen)

        print("========================SIMULATION=====================")
        print()
        # Run generator
        if args.n_samples == 1:
            print("Generating single sample...")
            z, x, y = gen.generate(
                noise_var=args.noise_variance,
                n_reads=args.n_reads,
                dt=args.time_step,
                downsample=args.downsample
            )
        elif args.case_fraction == 0:
            print(f"Generating {args.n_samples} samples...")
            z,x,y = gen.generate_multiple(
                n=args.n_samples,
                extinct_fraction=args.extinct_fraction,
                noise_var=args.noise_variance,
                n_reads=args.n_reads,
                dt=args.time_step,
                downsample=args.downsample
            )
        else:
            print(f"Generating {args.n_samples} samples (case-control)...")

            if args.intervention_node is None:
                args.intervention_node = gen.nodes[0].name

            z_control, x_control, y_control, z_case, x_case, y_case = gen.case_control(
                participants=args.n_samples,
                case_frac=args.case_fraction,
                node_name=args.intervention_node,
                effect_size=args.effect_size,
                extinct_fraction=args.extinct_fraction,
                noise_var=args.noise_variance,
                n_reads=args.n_reads,
                dt=args.time_step,
                downsample=args.downsample
            )

        # Save outputs
        print("=========================SAVING========================")
        print()

        try:
            os.mkdir(args.output_dir)
        except FileExistsError:
            print(f"output path {args.output_dir} already exists. Creating subdirectories.")

        path = f"{args.output_dir}/{uuid4()}"
        os.mkdir(path)
        print(f"Created directory {path}")

        if args.case_fraction == 0:
            gen.save(z, f"{path}/Z")
            gen.save(x, f"{path}/X")
            gen.save(y, f"{path}/Y")
        else:
            os.mkdir(f"{path}/control")
            os.mkdir(f"{path}/case")
            gen.save(z_control, f"{path}/control/Z")
            gen.save(z_case, f"{path}/case/Z")
            gen.save(x_control, f"{path}/control/X")
            gen.save(x_case, f"{path}/case/X")
            gen.save(y_control, f"{path}/control/Y")
            gen.save(y_case, f"{path}/case/Y")

        # Save plots
        if args.plot:
            print("Plotting timecourses")

            # Single plot case
            if args.n_samples == 1:
                os.mkdir(f"{path}/plots")
                for node in y:
                    plot = plot_timecourse(y[node])
                    print(f"\tSaving plot for individual 0, node '{node}' in {path}/plots/{node}.png")
                    plt.savefig(f"{path}/plots/{node}")

            # Multiple plot case, no case-control
            elif args.case_fraction == 0:
                os.mkdir(f"{path}/plots")
                for idx, sample in enumerate(y):
                    for node in sample:
                        plot = plot_timecourse(sample[node])
                        plt.title(f"Individual {idx}, node {node}", y=1.0, pad=30)
                        print(f"\tSaving plot for individual {idx}, node '{node}' in {path}/plots/{idx}_{node}.png")
                        plt.savefig(f"{path}/plots/{idx}_{node}")

            # Multiple plot case, case-control:
            else:
                os.mkdir(f"{path}/case/plots")
                os.mkdir(f"{path}/control/plots")
                for idx in range(len(z_control)):
                    sample = y_control[idx]
                    for node in sample:
                        plot = plot_timecourse(sample[node])
                        plt.title(f"Control: Individual {idx}, node {node}", y=1.0, pad=30)
                        print(f"\tSaving plot for individual {idx}, node '{node}' in {path}/control/plots/{idx}_{node}.png")
                        plt.savefig(f"{path}/control/plots/{idx}_{node}")
                for idx in range(len(z_case)):
                    sample = y_case[idx]
                    for node in sample:
                        plot = plot_timecourse(sample[node])
                        plt.title(f"Case: Individual {idx}, node {node}", y=1.0, pad=30)
                        print(f"\tSaving plot for individual {idx}, node '{node}' in {path}/case/plots/{idx}_{node}.png")
                        plt.savefig(f"{path}/case/plots/{idx}_{node}")

        # Save PCA
        if args.pca:
            print("Plotting PCA")
            os.mkdir(f"{path}/pca")

            if args.n_samples == 1:
                to_plot = [[y]]
                nodes = y
                colors=None
            elif args.case_fraction == 0:
                to_plot = [y]
                nodes = y[0]
                colors=None
            else:
                to_plot = [y_control, y_case]
                nodes = y_control[0]
                colors = ['red', 'blue']

            for node in nodes:
                plt.cla()
                plot_pca(to_plot, node, colors=colors)
                print(f"\tSaving PCA for node {node} in {path}/pca/{node}.png")
                plt.savefig(f"{path}/pca/{node}")

MisdeedOptions()
